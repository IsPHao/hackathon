version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: anime-postgres
    environment:
      POSTGRES_DB: anime_db
      POSTGRES_USER: anime_user
      POSTGRES_PASSWORD: anime_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anime_user -d anime_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - anime-network

  redis:
    image: redis:7-alpine
    container_name: anime-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - anime-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: anime-backend
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE:-https://api.openai.com/v1}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://anime_user:anime_password@postgres:5432/anime_db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - anime-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: anime-frontend
    environment:
      - VITE_API_BASE_URL=/api/v1
      - VITE_WS_BASE_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev -- --host
    networks:
      - anime-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  anime-network:
    driver: bridge
